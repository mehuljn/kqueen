openapi: "3.0.0"

info:
  version: "0.1"
  title: Kubernetes Queen API
  description: A simple API to interact with Kubernetes clusters

servers:
  - url: "http://localhost:5000/api/v1"
    description: "Development server"

components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - JWT: []

definitions:
  Unauthorized:
    type: "object"
    properties:
      description:
        type: "string"
        description: "Error description"
        example: "Invalid credentials"
      error:
        type: "string"
        description: "HTTP error"
        example: "Bad Request"
      status_code:
        type: "integer"
        description: "HTTP error code"
        example: 401
  getCluster:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      provisioner:
        $ref: "#/definitions/Provisioner"
      state:
        type: "string"
        enum:
          - "OK"
          - "Error"
          - "Deploying"
          - "Destroying"
          - "Unknown"
      kubeconfig:
        type: "string"
      metadata:
        type: "string"
  postCluster:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      provisioner:
        type: "string"
        example: "Provisioner:<uuid>"
      state:
        type: "string"
        enum:
          - "OK"
          - "Error"
          - "Deploying"
          - "Destroying"
          - "Unknown"
      kubeconfig:
        type: "string"
      metadata:
        type: "string"
  Provisioner:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      engine:
        type: "string"
      state:
        type: "string"
        enum:
          - "OK"
          - "Error"
          - "Not Reachable"
      parameters:
        description: "Engine-specific parameters"
        type: "object"

paths:
  # auth
  /auth:
    post:
      summary: "Authentication URL which returns JWT tokens"
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                  example: "admin"
                password:
                  type: "string"
                  example: "default"
      responses:
        "200":
          description: "Successful authentication"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  access_token:
                    type: "string"
                    description: "JWT token"
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
  # clusters
  /clusters:
    get:
      summary: "List all Clusters"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/definitions/getCluster"
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
    post:
      summary: "Create new Cluster"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/postCluster"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/definitions/getCluster"
        "400":
          description: "Request body is not valid JSON."
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
  /clusters/{id}:
    get:
      summary: "Get information about target Cluster"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/definitions/getCluster"
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
        "404":
          description: "Invalid ID or Cluster not found"
    patch:
      summary: "Update data of target Cluster"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/postCluster"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/definitions/getCluster"
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
        "404":
          description: "Invalid ID or Cluster not found"
    delete:
      summary: "Delete target Cluster"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                    format: "uuid"
                  state:
                    type: "string"
                    example: "deleted"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
        "404":
          description: "Cluster not found"
        "500":
          description: "Could not delete Cluster"
  # provisioners
  /provisioners:
    get:
      summary: "List all Provisioners"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/definitions/Provisioner"
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
    post:
      summary: "Create new Provisioner"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/Provisioner"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Provisioner"
        "400":
          description: "Request body is not valid JSON."
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
  /provisioners/{id}:
    get:
      summary: "Get information about target Provisioner"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Provisioner"
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
        "404":
          description: "Invalid ID or Provisioner not found"
    patch:
      summary: "Update data of target Provisioner"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/Provisioner"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Provisioner"
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
        "404":
          description: "Invalid ID or Provisioner not found"
    delete:
      summary: "Delete target Provisioner"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                    format: "uuid"
                  state:
                    type: "string"
                    example: "deleted"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Authorization information is missing or invalid."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Unauthorized"
        "404":
          description: "Provisioner not found"
        "500":
          description: "Could not delete Provisioner"

